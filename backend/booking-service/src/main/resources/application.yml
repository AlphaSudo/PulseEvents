# Server Configuration
server:
  port: 8082
  servlet:
    context-path: /booking-api

# Spring Configuration
spring:
  application:
    name: booking-service
  config:
    import: "optional:configserver:http://localhost:8888"

  mvc:
    static-path-pattern: /static/**

  # Database Configuration
  datasource:
    url: jdbc:postgresql://localhost:5432/${DB_NAME}
    username: ${DB_USERNAME}
    password: ${DB_PASSWORD}
    driver-class-name: org.postgresql.Driver
  
  # JPA and Hibernate Configuration
  jpa:
    hibernate:
      ddl-auto: update  # Use 'validate' in production
    show-sql: false
    properties:
      hibernate:
        format_sql: true
        dialect: org.hibernate.dialect.MySQLDialect
  
  # Jackson Configuration
  jackson:
    date-format: yyyy-MM-dd HH:mm:ss
    serialization:
      write-dates-as-timestamps: false

# Eureka Client Configuration
eureka:
  client:
    service-url:
      defaultZone: ${EUREKA_URI:http://localhost:8761/eureka}
    fetch-registry: true
    register-with-eureka: true
  instance:
    prefer-ip-address: true
    hostname: ${HOSTNAME:localhost}

# Authentication Service Configuration
auth:
  service:
    url: ${AUTH_SERVICE_URL:https://authentication-service}

# Actuator Configuration for Monitoring
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
  endpoint:
    health:
      show-details: when_authorized
  health:
    db:
      enabled: true

# Logging Configuration
logging:
  level:
    org.springframework.web: INFO
    org.hibernate: ERROR
    com.pro.bookingservice: DEBUG
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"

# Security Configuration (only store non-sensitive info here)
security:
  # JWT configuration
  jwt:
    expiration: 86400000  # 24 hours in milliseconds
    header: Authorization
    prefix: "Bearer "